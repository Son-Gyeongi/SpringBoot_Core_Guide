plugins {
    id 'java'
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'

    id 'jacoco'
}

group = 'com.springboot'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Swagger
    // https://mvnrepository.com/artifact/io.springfox/springfox-swagger2
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    // https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    // gson - 구글에서 개발한 JSON 파싱 라이브러리
    // 자바 객체를 JSON 문자열로 변환하거나 JSON 문자열을 자바 객체로 변환하는 역할
    implementation 'com.google.code.gson:gson:2.7'

    // 테스트 데이터베이스로 H2 DB 사용
    testImplementation 'com.h2database:h2'
//    runtimeOnly 'com.h2database:h2'
}

tasks.named('test') {
    // JUnit을 사용한다고 Gradle에 알려주는 것
    useJUnitPlatform()
    finalizedBy jacocoTestReport // test task를 실행할 때 마다 자동으로 JaCoCo task 들이 실행
}

// jacoco Test Coverage 설정
// jacoco 공식 문서 : https://www.jacoco.org/jacoco/trunk/doc/
// gradle jacoco 공식 문서 참고 : https://docs.gradle.org/current/userguide/jacoco_plugin.html
// 우아한 기술 블로그 참고 : https://techblog.woowahan.com/2661/
// 블로그 참고 : https://velog.io/@ejoo/Jacoco%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-Code-Coverage-%EC%B8%A1%EC%A0%95
jacoco {
    // JaCoCo 버전
    toolVersion = '0.8.8'

//  테스트결과 리포트를 저장할 경로 변경
//  default는 "$/jacoco"
    // 저장 위치 : C:\springStudy\springboot\springboot_core_guide\test\build\customJacocoReportDir\test\html
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    dependsOn test
    reports {
        // 원하는 리포트를 켜고 끌 수 있습니다.
        xml.required = true
        html.required = true
        csv.required = false
    }

    def Qdomains = []
    for (qPattern in '**/QA'..'**/QZ') {
        Qdomains.add(qPattern + '*')
    }

//    afterEvaluate {
//        classDirectories.setFrom(files(classDirectories.files.collect {
//            fileTree(dir: it, exclude: [
//                    '**/jwt/**',
//                    '**/init/**',
//                    '**/exception/**',
//                    '**/auth/**'
//            ] + Qdomains)
//        }))
//    }
}

jacocoTestCoverageVerification {
    // 이 커버리지 기준은 이 글의 맨 아래에서 다시 설명하겠습니다.
    violationRules {
        rule {
            element = 'BUNDLE'

            // 패키지 번들 단위로 바이트코드 명령 수를 기준으로 커버리지가 최소한 80% 달성하는 것
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            // 커버리지 체크를 제외할 클래스들
            excludes = [
                    '**/ProductServiceImpl.class'
            ]
        }
        rule {
            element = 'METHOD'

            // 메서드 단위로 전체 라인 수를 최대 50줄로 설정
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 50
            }

            // 커버리지 체크를 제외할 클래스들
            excludes = [
                    '**/ProductServiceImpl.class'
            ]
        }
    }
}