plugins {
    id 'java'
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

group = 'com.springboot'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Swagger
    // https://mvnrepository.com/artifact/io.springfox/springfox-swagger2
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    // https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

    /*
    RestTemplate은 기본적으로 커넥션 풀을 지원하지 않음
    - 매번 호출할 때마다 포트를 열어 커넥션을 생성하게 되는데,
        TIME-WAIT 상태가 된 소켓을 다시 사용하려고 접근한다면 재사용하지 못함
    - 이를 방지하기 위해서는 커넥션 풀 기능을 활성화해서 재사용할 수 있게 하는 것이 좋음
    - 이 기능을 활성화하는 가장 대표적인 방법은 아파치에서 제공하는 HttpClient로 대체해서 사용하는 방식임
        HttpClient 의존성을 추가하면 RestTemplate의 설정을 더욱 쉽게 추가하고 변경할 수 있음
     */
    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'

    // WebClient를 사용하기 위해서 WebFlux 모듈에 대한 의존성 추가
    // WebFlux는 클라이언트와 서버 간 리액티브 애플리케이션 개발을 지원하기 위해 스프링 프레임워크5에서 새롭게 추가된 모듈
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
}

tasks.named('test') {
    useJUnitPlatform()
}
